#! python


def build(ctx):
    from src.utilities import load_surrogates_specs
    from src.utilities import get_surrogate_instances

    specs = load_surrogates_specs()
    models = list(specs.keys())
    model_names = [specs[model]["model"] for model in models]
    model_instances = get_surrogate_instances(model_names)

    # fit
    for model, name, instance in zip(models, model_names, model_instances):
        ctx(
            features="run_py_script",
            source="fit.py",
            deps=[
                ctx.path_to(ctx, "OUT_DATA", "data_train.pkl"),
                ctx.path_to(ctx, "OUT_DATA", "sorted_features.csv"),
                ctx.path_to(ctx, "IN_MODEL_CODE", name + ".py"),
            ],
            target=[
                ctx.path_to(ctx, "OUT_FITTED_MODELS", model + instance.file_type),
                ctx.path_to(ctx, "OUT_FITTED_MODELS", model + "_scaler.pkl"),
            ],
            append=model,
            name="fit",
        )

    # predict
    ctx(
        features="run_py_script",
        source="predict.py",
        deps=[
            ctx.path_to(ctx, "OUT_DATA", "data_test.pkl"),
            ctx.path_to(ctx, "IN_ANALYSIS", "fit.py"),
        ] + [
            ctx.path_to(ctx, "OUT_FITTED_MODELS", model + instance.file_type) for model, instance in zip(models, model_instances)
        ],
        target=[
            ctx.path_to(ctx, "OUT_ANALYSIS", "predictions.pkl"),
        ],
        name="predict",
    )

    # evaluate
    ctx(
        features="run_py_script",
        source="evaluate.py",
        deps=[
            ctx.path_to(ctx, "OUT_ANALYSIS", "predictions.pkl"),
            ctx.path_to(ctx, "IN_ANALYSIS", "predict.py"),
        ],
        target=[
            ctx.path_to(ctx, "OUT_ANALYSIS", "losses.csv"),
        ],
        name="evaluate",
    )

    # bootstrap
    ctx(
        features="run_py_script",
        source="bootstrap.py",
        deps=[
            ctx.path_to(ctx, "OUT_DATA", "data_train.pkl"),
            ctx.path_to(ctx, "OUT_DATA", "data_test.pkl"),
            ctx.path_to(ctx, "IN_MODEL_CODE", "polynomialregression.py"),
            ctx.path_to(ctx, "IN_MODEL_CODE", "ridgeregression.py"),
        ],
        target=[
            ctx.path_to(ctx, "OUT_ANALYSIS", "bootstrap_mae.csv")
        ],
        name="bootstrap",
    )

    # ridge variable selection
    ctx(
        features="run_py_script",
        source="variable_selection.py",
        deps=[
            ctx.path_to(ctx, "OUT_DATA", "data_train.pkl"),
            ctx.path_to(ctx, "OUT_DATA", "data_test.pkl"),
            ctx.path_to(ctx, "IN_MODEL_CODE", "ridgeregression.py"),
            ctx.path_to(ctx, "IN_MODEL_CODE", "polynomialregression.py"),
        ],
        target=[
            ctx.path_to(ctx, "OUT_ANALYSIS", "variable_selection.pkl")
        ],
        name="variable_selection",
    )
